plugins {
    id "com.palantir.docker-run" version "0.13.0"
    id "com.moowork.node" version "1.2.0"
    id "com.dorongold.task-tree" version "1.3"
}

ext {
    env = System.getenv("DEPLOYMENT_ENV") ? System.getenv("DEPLOYMENT_ENV") : "dev"
    npmBin = "${projectDir}/node_modules/.bin"
    port = System.getenv("PORT") ? System.getenv("PORT") : 9002
}

node {
    download = true
    nodeModulesDir = file("${projectDir}")
    npmVersion = "5.5.1"
    version = "8.7.0"
}

task wrapper(type: Wrapper) {
    gradleVersion '4.0.1'
    distributionType 'all'
}

task bundle(type: Exec) {
    executable "${npmBin}/webpack"
    args = ["--config", "./webpack/webpack.config.js", "--env.env", env]
}

dockerRun {
    name "visual-cell-web"
    image "nginx"
    volumes ".": "/usr/share/nginx/html/"
    clean true
    ports "${port}:80"
}

task lint(type: Exec) {
    executable "${npmBin}/tslint"
    FileTree tsFiles = fileTree(dir: "src", includes: ["**/*.ts", "**/*.tsx"])
    args = ["-c", "tslint.json"] + tsFiles.asList()
}

task start(type: Exec) {
    executable "${npmBin}/webpack-dev-server"
    args = ["--config", "./webpack/webpack.config.js"]
}

task test(type: Exec) {
    environment "TS_NODE_PROJECT", "tsconfig.commonjs.json"
    executable "${npmBin}/mocha"
    FileTree testFiles = fileTree(dir: "src", include: "**/*test*")
    args = ["--opts", "mocha.opts"] + testFiles.asList()
}
